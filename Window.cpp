//TODO: 
//Animation for movement
//Make main menu
//Make level menu
//Make story
//Make level maps
//More wall textures
//Make background texture
//Make sounds
//Level Creator?


#include <SFML/Graphics.hpp>
//#include <SFML/Audio.hpp>
#include "character.hpp"
#include "CollisionObjects.hpp"
#include <iostream>
#include <vector>
#include <SFML/Config.hpp>
#include "GText.hpp"
#include <math.h>
#include <sstream>
#include <fstream>

using namespace sf;
using namespace std;

int main()
{
    Uint8 pPixels[1280] = {0,0,0,0,255,255,0,26,255,255,0,26,255,255,0,26,255,255,0,26,255,255,0,26,255,255,0,26,255,255,0,26,255,255,0,26,255,255,0,26,255,255,0,26,255,255,0,26,255,255,0,26,255,255,0,26,255,255,0,26,0,0,0,0,0,0,0,0,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,0,0,0,0,0,0,0,0,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,255,255,0,51,0,0,0,0,0,0,0,0,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,0,0,0,0,0,0,0,0,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,255,255,0,77,0,0,0,0,0,0,0,0,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,0,0,0,0,0,0,0,0,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,0,0,0,0,0,0,0,0,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,0,0,0,0,0,0,0,0,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,255,255,0,128,0,0,0,0,0,0,0,0,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,0,0,0,0,0,0,0,0,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,255,255,0,153,0,0,0,0,0,0,0,0,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,0,0,0,0,0,0,0,0,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,255,255,0,179,0,0,0,0,0,0,0,0,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,0,0,0,0,0,0,0,0,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,255,255,0,204,0,0,0,0,0,0,0,0,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,0,0,0,0,0,0,0,0,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,0,0,0,0,0,0,0,0,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,0,0,0,0,50,50,50,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,255,255,0,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230,50,50,50,230};
    Uint8 coinPixels[2704] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,255,0,0,0,255,30,30,30,255,15,15,15,255,30,30,30,255,45,45,45,255,45,45,45,255,15,15,15,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,255,60,60,60,255,45,45,45,255,60,60,60,255,75,75,75,255,60,60,60,255,45,45,45,255,30,30,30,255,60,60,60,255,60,60,60,255,30,30,30,255,30,30,30,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,30,30,255,45,45,45,255,60,60,60,255,45,45,45,255,255,255,155,255,255,255,124,255,255,255,124,255,255,255,93,255,255,255,62,255,255,255,124,255,255,255,93,255,255,255,62,255,45,45,45,255,30,30,30,255,30,30,30,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,30,30,255,45,45,45,255,60,60,60,255,255,255,124,255,255,255,155,255,255,255,155,255,255,255,186,255,255,255,93,255,255,255,155,255,255,255,93,255,255,255,124,255,255,255,124,255,255,255,93,255,255,255,93,255,255,255,62,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,255,45,45,45,255,255,255,155,255,255,255,186,255,255,255,124,255,255,255,155,255,255,255,217,255,255,255,155,255,255,255,155,255,45,45,45,255,60,60,60,255,255,255,93,255,255,255,62,255,255,255,93,255,255,255,62,255,255,255,31,255,255,255,0,255,255,255,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,255,45,45,45,255,255,255,124,255,255,255,155,255,255,255,124,255,255,255,155,255,255,255,217,255,255,255,186,255,255,255,124,255,255,255,124,255,60,60,60,255,45,45,45,255,255,255,93,255,255,255,93,255,255,255,62,255,255,255,31,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,60,60,255,60,60,60,255,255,255,186,255,255,255,124,255,255,255,155,255,255,255,155,255,255,255,217,255,255,255,186,255,75,75,75,255,60,60,60,255,60,60,60,255,45,45,45,255,45,45,45,255,30,30,30,255,30,30,30,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,60,60,60,255,60,60,60,255,255,255,155,255,255,255,155,255,255,255,155,255,255,255,124,255,255,255,217,255,255,255,124,255,90,90,90,255,45,45,45,255,45,45,45,255,15,15,15,255,30,30,30,255,30,30,30,255,30,30,30,255,15,15,15,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,60,60,60,255,75,75,75,255,255,255,124,255,255,255,186,255,255,255,186,255,255,255,155,255,255,255,155,255,90,90,90,255,90,90,90,255,255,255,93,255,255,255,93,255,15,15,15,255,15,15,15,255,255,255,31,255,255,255,31,255,255,255,31,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,0,0,0,255,0,0,0,255,0,0,0,0,45,45,45,255,45,45,45,255,255,255,124,255,255,255,186,255,255,255,186,255,255,255,124,255,255,255,155,255,255,255,186,255,60,60,60,255,75,75,75,255,255,255,93,255,255,255,31,255,15,15,15,255,15,15,15,255,255,255,31,255,255,255,31,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,0,0,0,255,0,0,0,255,60,60,60,255,75,75,75,255,255,255,93,255,255,255,155,255,255,255,93,255,255,255,124,255,255,255,124,255,255,255,155,255,45,45,45,255,45,45,45,255,255,255,62,255,255,255,31,255,15,15,15,255,15,15,15,255,255,255,0,255,255,255,31,255,255,255,0,255,255,255,0,255,255,255,0,255,224,224,0,255,255,255,0,255,255,255,0,255,224,224,0,255,193,193,0,255,0,0,0,255,0,0,0,255,30,30,30,255,30,30,30,255,255,255,124,255,255,255,124,255,255,255,124,255,255,255,124,255,255,255,124,255,255,255,93,255,60,60,60,255,30,30,30,255,15,15,15,255,255,255,31,255,15,15,15,255,15,15,15,255,255,255,31,255,255,255,0,255,255,255,0,255,255,255,0,255,224,224,0,255,224,224,0,255,255,255,0,255,193,193,0,255,224,224,0,255,224,224,0,255,0,0,0,255,0,0,0,255,30,30,30,255,45,45,45,255,255,255,62,255,255,255,62,255,255,255,93,255,255,255,124,255,255,255,93,255,255,255,62,255,255,255,93,255,30,30,30,255,30,30,30,255,15,15,15,255,15,15,15,255,15,15,15,255,0,0,0,255,0,0,0,255,255,255,0,255,224,224,0,255,224,224,0,255,224,224,0,255,193,193,0,255,224,224,0,255,224,224,0,255,255,255,0,255,0,0,0,255,0,0,0,255,15,15,15,255,45,45,45,255,255,255,93,255,255,255,62,255,255,255,62,255,255,255,93,255,255,255,62,255,255,255,93,255,255,255,93,255,255,255,62,255,15,15,15,255,15,15,15,255,15,15,15,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,0,255,224,224,0,255,224,224,0,255,224,224,0,255,224,224,0,255,193,193,0,255,224,224,0,255,0,0,0,255,0,0,0,255,30,30,30,255,30,30,30,255,255,255,93,255,255,255,62,255,255,255,31,255,255,255,62,255,255,255,62,255,255,255,124,255,255,255,62,255,255,255,31,255,255,255,31,255,255,255,31,255,0,0,0,255,0,0,0,255,224,224,0,255,255,255,0,255,0,0,0,255,0,0,0,255,224,224,0,255,224,224,0,255,224,224,0,255,193,193,0,255,193,193,0,255,224,224,0,255,0,0,0,255,0,0,0,255,0,0,0,255,15,15,15,255,255,255,31,255,255,255,93,255,255,255,93,255,255,255,93,255,255,255,93,255,255,255,62,255,255,255,62,255,255,255,0,255,255,255,31,255,255,255,0,255,0,0,0,255,0,0,0,255,224,224,0,255,255,255,0,255,0,0,0,255,0,0,0,255,193,193,0,255,193,193,0,255,193,193,0,255,193,193,0,255,193,193,0,255,193,193,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,0,255,255,255,93,255,255,255,62,255,255,255,93,255,255,255,124,255,255,255,31,255,255,255,31,255,255,255,31,255,255,255,0,255,255,255,0,255,0,0,0,255,0,0,0,255,255,255,0,255,193,193,0,255,0,0,0,255,0,0,0,255,255,255,0,255,193,193,0,255,193,193,0,255,162,162,0,255,193,193,0,255,162,162,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,30,30,30,255,255,255,62,255,255,255,31,255,255,255,62,255,255,255,0,255,255,255,31,255,255,255,0,255,255,255,0,255,255,255,0,255,224,224,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,193,193,0,255,193,193,0,255,162,162,0,255,162,162,0,255,162,162,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,15,15,15,255,255,255,31,255,255,255,31,255,255,255,31,255,255,255,31,255,255,255,0,255,255,255,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,193,193,0,255,193,193,0,255,162,162,0,255,162,162,0,255,193,193,0,255,162,162,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,193,193,0,255,162,162,0,255,193,193,0,255,162,162,0,255,193,193,0,255,162,162,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,224,224,0,255,255,255,0,255,193,193,0,255,0,0,0,255,0,0,0,255,193,193,0,255,193,193,0,255,162,162,0,255,193,193,0,255,162,162,0,255,162,162,0,255,162,162,0,255,193,193,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,224,224,0,255,193,193,0,255,224,224,0,255,0,0,0,255,0,0,0,255,224,224,0,255,162,162,0,255,193,193,0,255,162,162,0,255,162,162,0,255,162,162,0,255,162,162,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,255,255,0,255,255,255,0,255,224,224,0,255,255,255,0,255,224,224,0,255,224,224,0,255,224,224,0,255,224,224,0,255,162,162,0,255,193,193,0,255,162,162,0,255,162,162,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,224,224,0,255,224,224,0,255,255,255,0,255,224,224,0,255,193,193,0,255,162,162,0,255,193,193,0,255,193,193,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    Uint8 ePixels[1664] = {};
    Uint8 jPixels2[2704] = {100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,100,100,100,255,50,50,50,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,75,75,75,255,50,50,50,255,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,50,50,50,255,50,50,50,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,255,50,50,50,255};
    Uint8 jPixels1[1040] = {};
    Uint8 sPixels[2080] = {58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,58,35,35,255,66,34,27,255,58,35,35,255,58,35,35,255,255,255,255,255,255,255,255,255,0,0,0,255,0,0,0,255,255,255,255,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,255,0,0,0,255,0,0,0,255,255,255,255,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,255,0,0,0,255,0,0,0,255,255,255,255,255,58,35,35,255,66,34,27,255,58,35,35,255,58,35,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,58,35,35,255,66,34,27,255,58,35,35,255,58,35,35,255,255,255,255,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,255,0,0,0,255,255,255,255,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,255,58,35,35,255,66,34,27,255,58,35,35,255,58,35,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,58,35,35,255,66,34,27,255,58,35,35,255,58,35,35,255,255,255,255,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,255,0,0,0,255,0,0,0,255,255,255,255,255,0,0,0,255,255,255,255,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,255,0,0,0,255,255,255,255,255,58,35,35,255,66,34,27,255,58,35,35,255,58,35,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,58,35,35,255,66,34,27,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,89,46,37,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,89,46,37,255,89,46,37,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,35,35,255,58,35,35,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,35,35,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    Uint8 bPixels[2704] = {58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,66,34,27,255,0,0,0,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,58,35,35,255,0,0,0,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,89,46,37,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255};
    Uint8 cPixels[1664] = {};
    const int windowWidth = 1020, windowHeight = 780;
    Vector2f translate((float)windowWidth / 2,(float)windowHeight / 2);
    int level = 1;
    bool levelIsChanging = false;
    const int gridSize = 26;
    const int totalLevels = 3, levelY = windowHeight / gridSize;
    const int numQuestions = 1;
    String questions[numQuestions][5] = {
        {"What is the time?","Two fourty eight", "One of the clock", "Not sure", "Unspecified"}
    };
    const String levels[totalLevels][levelY] = {
	{       
		"",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "                 2     2",
                "                 2     2",
                "                 2     2",
                "                 2     2",
                "                 2     2",
                "                 2     2",
                "                 2     2",
                "                 2  #  2",
                "0000000000000000000000000000000000000000"},
            {

                "2                   0000000000000000000110000001100000000000000000000001111111111*1111111111",
                "2       00000000000 0                 0 @0                            0111111111111111111111",
                "2                   0                 0000                    0    !  0111111111111111111111",
                "2                   0  0                                    000 0000000111111111111111111111",
                "2                   1   0                                  0  0       0111111111111111111111",
                "2                   1    0                                0   0000000 0111111111111111111111",
                "2_    _             0     0                              0      !     0111111111111111111111",
                "2                   0      0                            0  000000000000111111111111111111111",
                "2                   0       0                          00             0111111111111111111111",
                "2                   0       000000 0000            !  00000           0111111111111111111111",
                "2                   0                              00000000 0 0 0 0 0 0111111111111111111111",
                "2_                  0                      0        0     0 0 0 0 0 0 0111111111111111111111",
                "2                   0                       0      0      0 0 0 0 0 0 0111111111111111111111",
                "2                   0                        0    0                   0111111111111111111111",
                "2                   0                            0    00000000000000000111111111111111111111",
                "2                   0             _         0        0                0111111111111111111111",
                "2                   0                         0     0                 0111111111111111111111",
                "2_                  0                              0                  0111111111111111111111",
                "2                   0                             0                   0111111111111111111111",
                "2                   0                 !          0                    0111111111111111111111",
                "2                   0             __0__         0                     0111111111111111111111",
                "2                   0                          0                      0111111111111111111111",
                "2                   0                  $$$$$$                         0111111111111111111111",
                "2_                  0         ??   $$$$$00000                         0111111111111111111111",
                "2                   1        0000  00000011100                        00000111111110000000000",
                "2                   1       0      ********1100                                             0",
                "2                   0      0       *111111*11100                                            0",
                "2                   0#    0   !    0111111**11100                                           0",
                "2_00000000000000000000000000000000000000000000000000000000   00000000000000000000000000000000"
            },
	{"#","0"}
    };

    std::vector<Enemy> enemies;
    std::vector<Sign> signs;
    std::vector<Wall> wallsD;
    std::vector<Wall> wallsI;
    std::vector<Wall> wallsR;
    std::vector<Portal> portals;
    std::vector<Jump> jumpThings;
    std::vector<Coin> coins;
    std::vector<Coin> coinsI;
    int totalSigns = 0;

    Texture character, brick, signTexture, spring, spring2, enemy, coinTexture, portalTexture;
    character.create(16,26);
    character.update(cPixels);
    brick.create(26,26);
    brick.update(bPixels);
    signTexture.create(26,20);
    signTexture.update(sPixels);
    spring.create(26,10);
    spring.update(jPixels1);
    spring2.create(26,26);
    spring2.update(jPixels2);
    enemy.create(16,26);
    enemy.update(ePixels);
    coinTexture.create(26,26);
    coinTexture.update(coinPixels);
    portalTexture.create(16,20);
    portalTexture.update(pPixels);
    

    int fadeTimer = 255;
    int questionTimer = 0;
    int coinAmount = 0;

    int unlockedLevels = 0;

    bool isQuestioning = false;

    Clock time;

    float time2add = 0;

    RenderWindow window(VideoMode(windowWidth, windowHeight, 32), "FBLA Game", Style::Close | Style::Titlebar);
    window.setVerticalSyncEnabled(true);
    window.setFramerateLimit(60);
    View main(FloatRect(0, 0, windowWidth, windowHeight));

    Character player((float)windowWidth / 2,50,16,26,character);

    RectangleShape background;
    background.setSize(Vector2f(windowWidth,windowHeight));
    background.setTexture(&character);

    RectangleShape background2;
    background2.setPosition(windowWidth,0);
    background2.setSize(Vector2f(windowWidth,windowHeight));
    background2.setTexture(&character);

    bool isSet = false;

    ifstream t(".FBLA-GAME-SAVE.bin");
    string savedData;
    size_t comma, comma2;
    if(t) {
        string savedData2((istreambuf_iterator<char>(t)), istreambuf_iterator<char>());
	savedData = savedData2;
	comma = savedData.find(',');

        unlockedLevels = stoi(savedData.substr(0, comma));

	comma2 = savedData.find(',', comma + 1);
	level = stoi(savedData.substr(comma+1, comma2));

	comma = savedData.find(',', comma2 + 1);
	player.position.x = stoi(savedData.substr(comma2+1, comma));

	comma2 = savedData.find(',', comma + 1);
	player.position.y = stoi(savedData.substr(comma+1, comma2));

	comma = savedData.find(',', comma2 + 1);
	coinAmount = stoi(savedData.substr(comma2+1, comma));

	comma2 = savedData.find(',', comma + 1);
	time2add = stoi(savedData.substr(comma+1, comma2));

	comma = savedData.find(',', comma2 + 1);
	player.lives = stoi(savedData.substr(comma2+1, comma));
	isSet = true;
    }

    //render loop
    time.restart();
    while (window.isOpen())
    {
        //Handle events
        Event event;
        while (window.pollEvent(event))
        {
            if (event.type == Event::Closed)
            {
                window.close();
                break;
            }
        }

        //set player locations
        if(fadeTimer == 255)
        {
            if(levelIsChanging) {
                level++;
                levelIsChanging = false;
		player.lives = 3;
            }
            player.isAlive = true;
            enemies.clear();
	    if(player.lives == 3 || isSet) wallsR.clear();
	    if(player.lives == 3 || isSet) wallsD.clear();
	    if(player.lives == 3 || isSet) wallsI.clear();
	    if(player.lives == 3 || isSet) coins.clear();
	    if(player.lives == 3 || isSet) coinsI.clear();
	    if(player.lives == 3 || isSet) signs.clear();
	    if(player.lives == 3 || isSet) portals.clear();
	    if(player.lives == 3 || isSet) jumpThings.clear();
	    if(player.lives == 3 || isSet) totalSigns = 0;
            for (int y = 0; y < levelY; y++) {
                for (int x = 0; x < levels[level][y].getSize(); x++) {
                    switch (levels[level][y][x]) {
                        case '!':
			    enemies.push_back(Enemy(x * gridSize, y * gridSize + 26, 16, 26, enemy));
                            break;
                        case '#':
                            if(!isSet) player.position = Vector2f(x * gridSize, y * gridSize + 26);
			    player.update(1);
                            break;
                        case '0':
			    if(player.lives == 3 || isSet) wallsR.push_back(Wall(x * gridSize, y * gridSize + 26, gridSize, gridSize, brick));
			    break;
                        case '1':
			    if(player.lives == 3 || isSet) wallsD.push_back(Wall(x * gridSize, y * gridSize + 26, gridSize, gridSize, brick));
                            break;
			case '2':
			    if(player.lives == 3 || isSet) wallsI.push_back(Wall(x * gridSize, y * gridSize + 26, gridSize, gridSize));
			    break;
			case '?':
			    if(player.lives == 3 || isSet) signs.push_back(Sign(x * gridSize, y * gridSize + 32, gridSize, gridSize, signTexture));
			    break;
			case '@':
			    if(player.lives == 3 || isSet) portals.push_back(Portal(x * gridSize + 5, y * gridSize + 32, 16, 20, portalTexture));
			    break;
			case '_':
			    if(player.lives == 3 || isSet) jumpThings.push_back(Jump(x * gridSize, y * gridSize + 26, gridSize, 10, spring, spring2));
			    break;
			case '$':
			    if(player.lives == 3 || isSet) coins.push_back(Coin(x * gridSize, y * gridSize + 26, gridSize, gridSize, coinTexture));
			    break;
			case '*':
			    if(player.lives == 3 || isSet) coinsI.push_back(Coin(x * gridSize, y * gridSize + 26, gridSize, gridSize, coinTexture, brick));
			    break;
                    }
                }
            }
	    if(isSet) {
		for(Enemy& enemy : enemies) {
		    float xPosition;
		    float yPosition;

		    if(comma > comma2) {
			comma2 = savedData.find(',', comma + 1);
			xPosition = stoi(savedData.substr(comma+1, comma2));
			comma = savedData.find(',', comma2 + 1);
			yPosition = stoi(savedData.substr(comma2+1, comma));
		    } else {
			comma = savedData.find(',', comma2 + 1);
			xPosition = stoi(savedData.substr(comma2+1, comma));
			comma2 = savedData.find(',', comma + 1);
			yPosition = stoi(savedData.substr(comma+1, comma2));
		    }
		    enemy.position = Vector2f(xPosition,yPosition);
		}
		for(Sign& sign : signs) {
		    int isThere;

		    if(comma > comma2) {
			comma2 = savedData.find(',', comma + 1);
			isThere = stoi(savedData.substr(comma+1, comma2));
		    } else {
			comma = savedData.find(',', comma2 + 1);
			isThere = stoi(savedData.substr(comma2+1, comma));
		    }
		    if(isThere == 0) {
			sign.shape.setColor(Color(255,255,255,0));
		    }
		}
		for(Coin& coin : coins) {
		    int isThere;

		    if(comma > comma2) {
			comma2 = savedData.find(',', comma + 1);
			isThere = stoi(savedData.substr(comma+1, comma2));
		    } else {
			comma = savedData.find(',', comma2 + 1);
			isThere = stoi(savedData.substr(comma2+1, comma));
		    }
		    if(isThere == 0) {
			coin.shape.setColor(Color(255,255,255,0));
		    }
		}
		for(Coin& coin : coinsI) {
		    int isThere;

		    if(comma > comma2) {
			comma2 = savedData.find(',', comma + 1);
			isThere = stoi(savedData.substr(comma+1, comma2));
		    } else {
			comma = savedData.find(',', comma2 + 1);
			isThere = stoi(savedData.substr(comma2+1, comma));
		    }
		    if(isThere == 0) {
			coin.shape.setColor(Color(255,255,255,0));
		    }
		}
	    }
	    isSet = false;
            translate.x = player.position.x;
            main.setCenter(translate);
            background.setPosition(translate.x,0);
            background2.setPosition(translate.x + windowWidth,0);
        }


        //apply forces to players
        if(fadeTimer >= 510 && !isQuestioning) {
            player.velocity.y += 0.4;
            player.controls();
            for (Enemy &enemy : enemies) {
                enemy.move();
            }
            //check for collisions
            for(int checkCollisions = 0; checkCollisions < round(abs(hypot(player.velocity.x, player.velocity.y)) + 0.5); checkCollisions++)
            {
	        for(Portal& portal : portals) {
		    player.collide(portal, levelIsChanging);
	        }
	        for(Sign& sign : signs) {
	 	    if(sign.shape.getColor() != Color(255,255,255,0) && player.collide(sign)) {
		        isQuestioning = true;
			questionTimer = 0;
			sign.shape.setColor(Color(255,255,255,0));
		    }
	        }
	        for(Wall& wall : wallsR) {
		    player.collide(wall);
	        }
		for(Jump& jump : jumpThings) {
		    player.collide(jump);
	        }
		for(Coin& coin : coins) {
		    if(player.collide(coin) && coin.shape.getColor() != Color(255,255,255,0)) {
			coin.shape.setColor(Color(255,255,255,0));
			coinAmount++;
		    }
		    
	        }
		for(Coin& coin : coinsI) {
		    if(player.collide(coin) && coin.shape.getColor() != Color(255,255,255,0)) {
			coin.shape2.setColor(Color(255,255,255,100));
			coin.shape.setColor(Color(255,255,255,0));
			coinAmount++;
		    }
		    
	        }
	        for(Wall& wall : wallsI) {
		    player.collide(wall);
	        }
                //collisions with enemies
                for(Enemy& enemy : enemies) {
                    player.collide(enemy);
                }

                //update the player's location
                player.update(round(abs(hypot(player.velocity.x, player.velocity.y)) + 0.5));
            }
	}

        //update location of the background images
        if(translate.x > background.getPosition().x + windowWidth * 1.5) {
            background.setPosition(background2.getPosition().x + windowWidth,0);
        } else if (translate.x < background.getPosition().x - windowWidth * 0.5) {
            background.setPosition(background2.getPosition().x - windowWidth,0);
        }
        if(translate.x > background2.getPosition().x + windowWidth * 1.5) {
            background2.setPosition(background.getPosition().x + windowWidth,0);
        } else if (translate.x < background2.getPosition().x - windowWidth * 0.5) {
            background2.setPosition(background.getPosition().x - windowWidth,0);
        }

        //clear and draw new frames
        window.clear(Color::Black);
        window.setView(main);


        //draw specific things
        window.draw(background);
        window.draw(background2);
        window.draw(player.shape);

	//draw portals
	for(Portal &portal : portals) {
	    window.draw(portal.shape);
	}

	for(Coin &coin : coins) {
	    coin.rotate();
	    window.draw(coin.shape);
	}

	for(Coin &coin : coinsI) {
	    coin.rotate();
	    window.draw(coin.shape);
	    if(coin.shape2.getColor() == Color(255,255,255,100)) {
	    	for(Coin &coin2 : coinsI) {
	            if(coin2.position != coin.position && coin2.position.x + coin2.width + 1 > coin.position.x && coin2.position.x - 1 < coin.position.x + coin.width && coin2.position.y + coin2.height + 1 > coin.position.y && coin2.position.y - 1 < coin.position.y + coin.height && coin2.shape2.getColor() != Color(255,255,255,100)) {
		        coin2.shape2.setColor(Color(255,255,255,100));
		    }
	        }
		for(Wall &wall : wallsD) {
		    if(wall.position != coin.position && wall.position.x + wall.width + 1 > coin.position.x && wall.position.x - 1 < coin.position.x + coin.width && wall.position.y + wall.height + 1 > coin.position.y && wall.position.y - 1 < coin.position.y + coin.height && wall.shape.getColor() != Color(255,255,255,100)) {
		        wall.shape.setColor(Color(255,255,255,100));
		    }
		}
	    }
	    window.draw(coin.shape);
	    window.draw(coin.shape2);
	}

	
	//draw question things
	for(Sign &sign : signs) {
	    window.draw(sign.shape);
	}

	//draw walls
	for(Wall &wall : wallsR) {
	    window.draw(wall.shape);
	}
	for(Wall &wall : wallsD) {
	    if (player.position.x + player.width > wall.position.x && player.position.x < wall.position.x + wall.width && player.position.y + player.height > wall.position.y && player.position.y < wall.position.y + wall.height) {
		wall.shape.setColor(Color(255,255,255,100));
	    }
	    if(wall.shape.getColor() == Color(255,255,255,100)) {
	        for(Wall &wall2 : wallsD) {
	            if(wall2.position != wall.position && wall2.position.x + wall2.width + 1 > wall.position.x && wall2.position.x - 1 < wall.position.x + wall.width && wall2.position.y + wall2.height + 1 > wall.position.y && wall2.position.y - 1 < wall.position.y + wall.height && wall2.shape.getColor() != Color(255,255,255,100)) {
		        wall2.shape.setColor(Color(255,255,255,100));
		    }
	        }
	        for(Coin &coin : coinsI) {
	            if(coin.position != wall.position && coin.position.x + coin.width + 1 > wall.position.x && coin.position.x - 1 < wall.position.x + wall.width && coin.position.y + coin.height + 1 > wall.position.y && coin.position.y - 1 < wall.position.y + wall.height && coin.shape2.getColor() != Color(255,255,255,100)) {
		        coin.shape2.setColor(Color(255,255,255,100));
		    }
	        }
	    }
	    window.draw(wall.shape);
	}

	for(Jump &jump : jumpThings) {
	    window.draw(jump.shape);
	    if(jump.shape.getTexture() != &spring) {
	    	jump.springTimer++;
	    }
	    if(jump.springTimer > 10) {
		jump.shape.setTexture(spring, true);
	    	jump.shape.setPosition(jump.originalPos);
		jump.springTimer = 0;
	    }
	}

	//draw enemies
        for(Enemy &enemy : enemies) {
	    for(Wall &wall : wallsR) {
		enemy.collide(wall);
	    }
	    for(Jump &jump : jumpThings) {
		enemy.collide(jump);
	    }
            enemy.update();
            window.draw(enemy.shape);
        }

        //draws fading overlay
        if(fadeTimer < 510) {
            RectangleShape backgroundThing;
            backgroundThing.setPosition(translate.x - windowWidth / 2, 0);
            backgroundThing.setSize(Vector2f(windowWidth, windowHeight));
            backgroundThing.setFillColor(Color(0,0,0, fadeTimer > 255 ? 255 - fadeTimer : fadeTimer));
            window.draw(backgroundThing);
            fadeTimer+=5;
        }

	if(isQuestioning) {
	    RectangleShape popUp;
	    popUp.setPosition(translate.x - windowWidth / 2 + 150,100);
	    popUp.setSize(Vector2f(windowWidth - 300, windowHeight - 200));
	    popUp.setFillColor(Color::Black);
	    popUp.setOutlineColor(Color::White);
	    popUp.setOutlineThickness(5);
	    window.draw(popUp);
	    int randomNum;
	    int random2;
	    if(questionTimer == 0) {
	    	randomNum = rand();
	    	random2 = rand();
	    }
	    questionTimer++;

	    Vector2f questionLength = text(questions[randomNum % numQuestions][0],translate.x - 345,120,1, window); 
	    Vector2f responseA = text(questions[randomNum % numQuestions][random2 % 4 + 1],translate.x - 345,160 + questionLength.y,1, window);
	    Vector2f responseB = text(questions[randomNum % numQuestions][(random2 + 1) % 4 + 1],translate.x - 345,190 + questionLength.y + responseA.y,1, window);
	    Vector2f responseC = text(questions[randomNum % numQuestions][(random2 + 2) % 4 + 1],translate.x - 345,220 + questionLength.y + responseA.y + responseB.y,1, window);
	    Vector2f responseD = text(questions[randomNum % numQuestions][(random2 + 3) % 4 + 1],translate.x - 345,250 + questionLength.y + responseA.y + responseB.y + responseC.y,1, window);
	    if(Mouse::getPosition(window).x >= 150 && Mouse::getPosition(window).x <= windowWidth - 150 && Mouse::getPosition(window).y >= 160 + questionLength.y && Mouse::getPosition(window).y <= 160 + questionLength.y + responseA.y) {
		RectangleShape selection;
		selection.setPosition(translate.x - windowWidth / 2  + 150, 160 + questionLength.y);
		selection.setSize(Vector2f(windowWidth - 300, responseA.y));
		selection.setFillColor(Color(255,255,255,100));
		window.draw(selection);
		if(Mouse::isButtonPressed(Mouse::Left)) {
		    if(random2 % 4 == 0) {
			isQuestioning = false;
		    }
		}
	    } else if(Mouse::getPosition(window).x >= 150 && Mouse::getPosition(window).x <= windowWidth - 150 && Mouse::getPosition(window).y >= 190 + questionLength.y + responseA.y && Mouse::getPosition(window).y <= 190 + questionLength.y + responseA.y + responseB.y) {
		RectangleShape selection;
		selection.setPosition(translate.x - windowWidth / 2  + 150, 190 + questionLength.y + responseA.y);
		selection.setSize(Vector2f(windowWidth - 300,responseB.y));
		selection.setFillColor(Color(255,255,255,100));
		window.draw(selection);
		if(Mouse::isButtonPressed(Mouse::Left)) {
		    if((random2 + 1) % 4 == 0) {
			isQuestioning = false;
		    }
		}
	    } else if(Mouse::getPosition(window).x >= 150 && Mouse::getPosition(window).x <= windowWidth - 150 && Mouse::getPosition(window).y >= 220 + questionLength.y + responseA.y + responseB.y && Mouse::getPosition(window).y <= 220 + questionLength.y + responseA.y + responseB.y + responseC.y) {
		RectangleShape selection;
		selection.setPosition(translate.x - windowWidth / 2  + 150, 220 + questionLength.y + responseA.y + responseB.y);
		selection.setSize(Vector2f(windowWidth - 300,responseC.y));
		selection.setFillColor(Color(255,255,255,100));
		window.draw(selection);
		if(Mouse::isButtonPressed(Mouse::Left)) {
		    if((random2 + 2) % 4 == 0) {
			isQuestioning = false;
		    }
		}
	    } else if(Mouse::getPosition(window).x >= 150 && Mouse::getPosition(window).x <= windowWidth - 150 && Mouse::getPosition(window).y >= 250 + questionLength.y + responseA.y + responseB.y + responseC.y && Mouse::getPosition(window).y <= 250 + questionLength.y + responseA.y + responseB.y + responseC.y + responseD.y) {
		RectangleShape selection;
		selection.setPosition(translate.x - windowWidth / 2  + 150, 250 + questionLength.y + responseA.y + responseB.y + responseC.y);
		selection.setSize(Vector2f(windowWidth - 300,responseD.y));
		selection.setFillColor(Color(255,255,255,100));
		window.draw(selection);
		if(Mouse::isButtonPressed(Mouse::Left)) {
		    if((random2 + 3) % 4 == 0) {
			isQuestioning = false;
		    }
		}
	    }
	}

        //sets fade animation to begin when player dies
        if(player.lives > 0 && fadeTimer == 510 && (!player.isAlive || player.position.y > windowHeight)) {
            player.lives--;
            fadeTimer = 0;
            player.velocity = Vector2f(0,0);
        }
        if(levelIsChanging && fadeTimer == 510) {
            fadeTimer = 0;
            player.velocity = Vector2f(0,0);
        }

	//overlays
	if(level != 0) {
	    RectangleShape bars(Vector2f(windowWidth, 26));
	    bars.setPosition(translate.x - windowWidth / 2, 0);
	    bars.setFillColor(Color(100,100,100));
	    window.draw(bars);
	
	    std::ostringstream out;
	    out.precision(2);
	    out << std::fixed << time.getElapsedTime().asSeconds() + time2add;
	    text(out.str(), (time.getElapsedTime().asSeconds() + time2add <= 10 ? translate.x - 400 : (time.getElapsedTime().asSeconds() + time2add <= 100 ? translate.x - 420 : translate.x - 440)), 5, 1, window);
	    text("SECONDS", translate.x - 350, 5, 1, window);
	    text(std::to_string(player.lives) + " LI" + (player.lives == 1 ? "FE" : "VES"), translate.x - 200,5,1,window);
	    text(std::to_string(coinAmount) + " COIN" + (coinAmount == 1 ? "" : "S"), translate.x,5,1,window);
	    text("PAUSE", translate.x + 200,5,1, window);
	} else {
	    text("GAME TITLE", 200, 100,5,window);
	    Sprite level1;
	    level1.setTexture(coinTexture);
	    level1.setPosition(100,300);
	    level1.setScale(5,5);
	    window.draw(level1);
	    text("LEVEL 1", 100,400,2,window);
	}

        //display everything
        window.display();


        //translate view
        if(((player.position.x > 100 + translate.x && player.velocity.x > 0) || (player.position.x < translate.x - 100 && player.velocity.x < 0)) && !isQuestioning)
        {
            translate.x += (int)player.velocity.x;
            main.setCenter(translate);
        }
    }
    //User is exiting game, save / cleanup anything?
    fstream fileThing(".FBLA-GAME-SAVE.bin", ios::out | ios::binary);
    fileThing << unlockedLevels << ',' << level << ',' << player.position.x << ',' << player.position.y << ',' << coinAmount << ',' << time.getElapsedTime().asSeconds() + time2add << ',' << player.lives << ',';
    for(Enemy& enemy : enemies) {
	fileThing << enemy.position.x << ',' << enemy.position.y << ',';
    }
    for(Sign& sign : signs) {
	fileThing << (sign.shape.getColor() != Color(255,255,255,0) ? 1 : 0) << ',';
    }
    for(Coin& coin : coins) {
	fileThing << (coin.shape.getColor() != Color(255,255,255,0) ? 1 : 0) << ',';
    }
    for(Coin& coin : coinsI) {
	fileThing << (coin.shape.getColor() != Color(255,255,255,0) ? 1 : 0) << ',';
    }
    fileThing.close();
    return EXIT_SUCCESS;
}
